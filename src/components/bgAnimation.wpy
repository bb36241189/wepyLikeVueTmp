<template>
    <div class="bg-animation {{ externalClasses}}">
        <div class="ba-inner">
            <img src="../img/universe_bg2.png" class="star-info-bg"/>
            <img src="../img/meteor.png" class="metetor-img" :style="{left: meteorPosition.x + 'rpx',top: meteorPosition.y +'rpx'}"/>
            <img src="../img/star.png" class="star-img" :style="{opacity: item.opacity,left: item.x + 'rpx',top: item.y +'rpx',width: item.width + 'rem',height: item.height + 'rem'}" v-for="(item,index) in stars" :key="index"/>
        </div>
    </div>
</template>
<style lang="less">
@import "../style/flex-integrate.less";
.star-index{
  height: 28rpx;
  width: 28rpx;
}
.ba-inner{
    position: relative;
    width: 100%;
    height: 100%;
}
.metetor-img{
    width: 28rpx;
    height: 28rpx;
    position: absolute;
}
.star-img{
    position: absolute;
}
.star-info-bg{
     position: absolute;
  width: 100%;
  min-height: 100%;
  top:0rpx;
  left:0rpx;
  right:0rpx;
  bottom:0rpx;
}
</style>
<script>
import wepy from '@wepy/core';
import testMixin from '../mixins/test';
wepy.component({
  props: ["score","color",'externalClasses'],
    mixins: [testMixin],
  data:{
        frameIndex: 0,
        meteorPosition: {
            x: 750/*1334/*window.screen.height*/,
            y: 0,
            tx: -0.5,
            ty: 0.5,
        },
        stars: null
    },
  computed: {
  },
  watch: {
      'meteorPosition.y'(){
          this.frameIndex ++;
          let v = this.meteorPosition;
          setTimeout(() => {
              v.x += v.tx;
              v.y += v.ty;
              if(v.y > 1334/*window.screen.height*/){
                  v.y = -200;
                  if(v.x > 750/*1334/*window.screen.height*/ || v.x < 0){
                        v.x = Math.random() * 750/*1334/*window.screen.height*/ * 2;
                    }
              }
          },20)
          if(this.frameIndex % 3 != 0){
              return;
          }
          this.stars.forEach(st => {
              if(st.isUp){
                  st.opacity < 1 && (st.opacity += 0.05);
                  st.opacity >= 1 && (st.isUp = false);
              }else{
                  st.opacity > 0 && (st.opacity -= 0.05);
                  st.opacity <= 0 && (st.isUp = true);
              }
          })
      }
  },
  methods: {
    randomStar(){
        let num = Math.floor(Math.random() * 50);
        this.stars = [];
        for(let i = 0;i<num;i++){
            let w = Math.random() * 0.5
            this.stars.push({
                x: Math.random() * 750/*1334/*window.screen.height*/,
                y: Math.random() * 1334/*window.screen.height*/,
                opacity: Math.random(),
                isUp: Math.random() > 0.5,//是不是正在变亮
                width: w,
                height:w
            })
        }
    }
  },
  created() {
      console.log('bgAnimation created');
      this.meteorPosition.y ++;
      this.randomStar();
  },
  mounted(){
    //   this.meteorPosition.y ++;
    //   this.randomStar();
  }
});
</script>
<config>
{
    usingComponents: {
    }
}
</config>